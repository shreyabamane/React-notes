Data Binding
Style Binding
Class Binding

                             Event Binding

- Event is a message sent by sender to its subscriber in order to notify the change.

                function InsertClick()    => Subscriber
                {
                }

                <button  onclick="InsertClick()">  => Sender

- Subscriber comprises of the actions to perform.
- Sender triggers a notification and invokes the actions defined by subscriber.
- Event follows a communication pattern called "Observer". [Behavioural Patterns]
- Event uses "Delegate" mechanism, which is a function pointer.

Event Handler:
- Every event is configured with a handler.

        onclick                =>      Event
        onclick="InsertClick()"    =>     Event Handler

- React event handler can be defined using various techniques

        <button onClick={ InsertClick }>
        <button onClick={ () => InsertClick() }>

- The function pointer  "{ InsertClick }"  can pass default "event" argument that send information about event and object.

         function  InsertClick(e)
         {
            e.target.id, name, className, value etc..
            e.clientX, clientY, keyCode, shiftKey, ctrlKey etc..
         }

        <button onClick={ Insertlick } >

- The function return  " { () => InsertClick('values') }> " allows to pass custom args.
- You can pass any type of arguments
        a) Primitive
        b) Non Primitive

        function InsertClick(ref)
        {
        }
       
        <button onClick={ ( ) => InsertClick(anyValue) }>


- The function return also allows to pass the default arguments along with custom arguments.

           function InsertClick('custom', e)
        {
        }

        <button onClick={ (e) => InsertClick('customValue', e)

        e.target.id, name, className..
        e.clientX, clientY, keyCode ...

Ex:
event-demo.jsx

export function EventDemo(){

    function InsertClick(cities, id){
        alert(`${cities}\n${id}`);
    }

    return(
        <div className="container-fluid">
            <button id="btnInsert" onClick={(e)=>InsertClick(['Delhi','Hyd'], e.target.id)}>Insert</button>
        </div>
    )
}

- All events are configured by JavaScript  window object. Hence they are reffered as Browser Events. [BOM]

- React uses a library called "SyntheticEvents", which map to Browser Events.

        SyntheticEvents        => Virtual DOM Events
        Browser Events        => DOM Events

           Virtual DOM               DOM
        [SyntheticEvent]           [Browser Event]
        ----------------------------------------------------------
          onClick                    onclick
          onChange                onchange
          onFocus                onfocus
          onSubmit                onsubmit
          etc...

- Event Propagation & Prevent Default
- PreventDefault is used to stop the default functionality configured for "Generic" elements in a <form>.

Ex:
event-demo.jsx

export function EventDemo(){


    return(
        <div className="container-fluid">
            <form onSubmit={(e)=> { e.preventDefault(); alert('Submit Clicked');}}>
                Name : <input type="text" name="UserName" /> <button type="submit">Submit</button>
            </form>
        </div>
    )
}

- StopPropagation will not allow the child events to simulate and trigger the parent events.

Ex:
event-demo.jsx

export function EventDemo(){

    function ContainerClick(){
        alert('Container Clicked');
    }

    function ButtonClick(e){
        alert('ButtonClicked');
        e.stopPropagation();
    }

    return(
        <div className="container-fluid">
            <div className="m-4 p-4 bg-warning" onClick={ContainerClick}>
                <h3>Parent</h3>
                <button className="btn btn-dark" onClick={ButtonClick}>Button</button>
            </div>
        </div>
    )
}
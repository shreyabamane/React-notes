Data Binding  in React
- Primitive Type
- Non Primitive

                              Object Type
                              -----------------
- It is a key and value collection
- Key is string and value can be any type.

Syntax:
        var  obj = { "Key" : value }

        <p> { obj.Key } </p>

Ex:
data-binding.jsx

import './data-binding.css';

export function DataBinding(){

    var product = {
       "Name": "Samsung TV",
       "Price": 34000.44,
       "Stock": true,
       "Cities": ["Delhi", "Hyd"],
       "Rating": { "Rate":4.3, "Count": 3000 }
    }

    return(
        <div className="container-fluid">
            <h2>Product Details</h2>
            <dl>
              <dt>Name</dt>
              <dd>{product.Name}</dd>
              <dt>Price</dt>
              <dd>{product.Price}</dd>
              <dt>Stock</dt>
              <dd>{(product.Stock==true)?"Avaialble":"Out of Stock"}</dd>
              <dt>Cities</dt>
              <dd>
                 <ul>
                    {
                      product.Cities.map(city=><li key={city}> {city} </li>)
                    }
                 </ul>
              </dd>
              <dt>Rating</dt>
              <dd> {product.Rating.Rate} <span className='bi bi-star-fill text-success'></span> [{product.Rating.Count}] </dd>
            </dl>
        </div>
    )
}

FAQ's:
1. How to get the list of all keys in object?
A. Object.keys()   or   for..in  statement

Syntax:
        var product = { Name: "TV",  Price: 45000.44 }

        {
          Object.keys(product).map(key=> <li key={key}> {key} </li>)
        }

2. How to remove a key from object?
A. By using "delete" operator

Syntax:
        delete  object.key

3. How to check for any key in object?
A. By using "in" operator

Syntax:
        "key"  in  object        => true if key available

                 
                              Map Type
- It is a key and value collection.
- Key can be any type and value any type.
- Map provides pre-defined methods and properties to mapulate the keys and values.
- It is faster than object.

Syntax:
        var  obj = new Map();
        obj.set(key, value)
        obj.get(key)
        obj.delete(key)
        obj.clear()
        obj.has(key)
        obj.size
        obj.keys()
        obj.values()
        obj.entries()

FAQ: What is difference between object and map?
Ans:

        Object                        Map
        ---------------------------------------------------------------------------------
        Key / Value collection            Key / Value collection
       
        Key is string type                Key can be any type
       
        It requires all explicit methods    It provides built-in methods
        for manipulation.                for manipulation

        It is slow in access                 It is fast in access

        It is structured                    It is schema less.


                          Array of Objects
- Data is stored as collection.
- Collection comprises multiple objects.
- Each object comprises of keys and values.

Syntax:
    var  products = [
                    { Name: "TV", Price: 40000.55},
                    { Name: "Mobile", Price: 31000.34}
                ]

- You can use various array methods to read and present data.

Ex:
data-binding.jsx

import './data-binding.css';

export function DataBinding(){

  var  products = [
    { Name: "TV", Price: 40000.55},
    { Name: "Mobile", Price: 31000.34}
  ];

 
    return(
        <div className="container-fluid">
          <table className='table table-hover mt-3'>
            <thead>
              <tr>
                <th>Name</th>
                <th>Price</th>
              </tr>
            </thead>
            <tbody>
               {
                 products.map(product=><tr key={product.Name}> <td>{product.Name}</td> <td>{product.Price}</td> </tr>)
               }
            </tbody>
          </table>
        </div>
    )
}

                         Date Type
- Date in JavaScript is configured using a "Date()" constructor
- React uses all JavaScript date manipulates using get & set methods.

Syntax:
        var  mfd  = new Date("year-month-day  hrs:min:sec.milliSeconds");
        var  now = new Date();

Date Methods:
        getHours()                setHours()
        getMinutes()                setMinutes()
        getSeconds()                setSeconds()
        getMilliSeconds()            setMilliSeconds()
        getDay()                    setDate()
        getDate()                    setMonth()
        getMonth()                setYear()
        getFullYear()
        toString()
        toLocaleString()
        toDateString()
        toTimeString()
        toLocaleDateString()
        toLocaleTimeString()

Syntax:
        var  mfd  = new Date("2024-01-21  16:23:45.67");
       
        { mfd.toLocaleDateString() }

Note: A react component can't store and use data from a variable.
          Variables a immutable types and component can't use immutable data.

                   
                          State in React Component
                      ------------------------------------
- HTTP is a state less protocol.
- It removes the memory allocated for a request when it completes the request.
- React components are handled over multiple requests, hence they require a state to store the data and use across requests.
- React provides state for class components, but not for function components.
- React 18 introduced new Hooks [methods] to configure a state for function component.
                           "useState()"

Configuring State for React Function Component:

1. Import useState hook from react core library

    import  { useState  }  from "react";

2. useState provides 2 members [accessors]
   
    a) getter to read value
    b) setter to write value

    const  [getter, setter] = useState();
    const  [name, setName] = useState('John'); => state is any type

    { name }

Ex:
data-binding.jsx

import './data-binding.css';

import { useState } from 'react';

export function DataBinding(){

    const [product] = useState({Name:'TV', Price:50000.33});
    const [categories] = useState(["All","Electronics","Fashion"]);
 
    return(
        <div className="container-fluid">
            Name : {product.Name} <br/>
            Price : {product.Price}
            <ul>
              {
                categories.map(category=> <li key={category}> { category }</li>)
              }
            </ul>
        </div>
    )
}